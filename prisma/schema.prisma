datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
}

// model QuizQuestion {
//   id            String    @id @default(auto()) @map("_id") @db.ObjectId
//   quizId        String
//   quiz          Quiz      @relation(fields: [quizId], references: [id], onDelete: Cascade)

//   body          String
//   choices       String[]

//   @@map("quizQuestions")
// }

type BatteryQuestion {
  id        String
  choices   Int[]
}

type Battery {
  id            String
  quizId        String
  quizVersion   Int
  questions     BatteryQuestion[]
  complete      Boolean       @default(false)
  correct       Int?
}

type QuizQuestion {
  guid      String
  body      String
  choices   String[]
}

model Quiz {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  authorId      String
  author        User      @relation(fields: [authorId], references: [id], onDelete: Cascade)

  dateCreated   DateTime  @default(now())
  dateUpdated   DateTime  @default(now())

  dateOpens     DateTime  @default(now())
  dateCloses    DateTime?

  private       Boolean   @default(true)

  version       Int       @default(1)

  name          String
  description   String
  keywords      String[]
  questions     QuizQuestion[]

  batteryCount  Int       @default(50)

  @@map("quizzes")
}

model Account {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  quizzes       Quiz[]
  batteries     Battery[]
  
  @@map("users")
}

model VerificationToken {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId

  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationTokens")
}